#summary some useful information


<wiki:toc max_depth="2" />
----
= Introduction =
useful information for developers wanting to compile the code.<br>
<br>
----
= toolchains =
== chroot in gentoo32 from gentoo64 or perhaps any other bitness/distro  ==
_thanks to *vatoz* for the first version of the howto_<br>
this should be straight forward (copy/paste) howto.<br>
Read [http://www.gentoo.org/proj/en/base/amd64/howtos/index.xml?part=1&chap=2 this documentation] for more details.<br>
follow these steps to create and enter your cross environment.
{{{
cd /tmp
url="http://mirrors.kernel.org/gentoo/releases/x86/autobuilds"
wget $url/`curl $url/latest-stage3-i686.txt | tail -1`
mkdir /mnt/gentoo32
cd /mnt/gentoo32/
tar -xvjpf /tmp/stage3-i686-*.tar.bz2 
# ### DO THE NEXT LINE ONLY IF YOUR HOST IS _NOT_ GENTOO ### #
# wget http://distfiles.gentoo.org/snapshots/portage-latest.tar.bz2 && tar xjf portage-lat* -C usr/
cp -L /etc/resolv.conf /mnt/gentoo32/etc/
$EDITOR /mnt/gentoo32/etc/make.conf #can be skipped
wget http://0xAF.org/chroot-gentoo32 -O ~/chroot-gentoo32.sh
chmod +x ~/chroot-gentoo32.sh
~/chroot-gentoo32.sh
}}}

if you can't download chroot-gentoo32 script for some reason, see the end of this document for the source code.

You should be in working 32bit chroot now..<br>
You can read [http://magiclantern.wikia.com/wiki/Build_instructions/550D magic lantern 550d build instructions] for details on the next steps.<br>
{{{
cd /tmp
wget "http://panora.ma/dev/summon-arm-toolchain"
bash ./summon-arm-toolchain
}}}

next you need to get the [http://code.google.com/p/400plus/downloads/list 400plus sources] somewhere in the chroot.<br>
if you want the current svn sources, you'll need to install subversion<br>
{{{
emerge -av subversion
}}}
then checkout
{{{
cd && svn checkout http://400plus.googlecode.com/svn/trunk/ 400plus-read-only
}}}

----
<br>



== fedora 14 in virtual machine ==
_thanks to *eduardo.perezesteban* (project maintainer) for this one_<br>
his post follows:<br>

As promised:<br><br>
=== Create a VM ===
I used Fedora 13 (64 bits) as the "host" OS, and Fedora 14 (32 bits) as the "guest" OS,<br>
for no other particular reason that it is what I am used to run;<br>
I downloaded the [http://fedoraproject.org/en/get-fedora-options Fedora 14 Desktop Edition (32 bit CD ISO)].<br>
Basically, I followed the [http://fedoraproject.org/wiki/Virtualization_Quick_Start Virtualization Quick Start guide] to create the virtual machine.<br>
Most relevant parameters for the emulation were: 4GB of disk space, 512 MB of RAM, 1 CPU.<br>
Select an i686 architecture (should work with a 64b arch, as long as you install a 32b OS)<br>
and use KVM if your processor supports it (it is way faster than the non-KVM alternative).<br>
Boot the VM, using the ISO downloaded previously, and install it to the (virtual) disk drive<br>
(there are no critical parameters here, just follow the installation assistant).<br>

=== Prepare the VM ===
No special preparation is required here, just update the software:
{{{
su -c "yum -y update"
su -c "yum -y update"
}}}
_Yes: it must be run twice, as the first update will only update the updater itself_<br>
then reboot (just the VM) and install the required dependencies:
{{{
su -c "yum -y install gcc mpfr-devel libmpc-devel"
}}}
=== Install the cross-compiler ===
I mostly followed the procedure outlined at<br>
http://chdk.wikia.com/wiki/Compiling_CHDK_under_Linux and<br>
http://chdk.wikia.com/wiki/Gcc433 , with some minor variations<br>
(installed to "/opt/arm-elf", and changed some parameters to avoid a bug in GCC):<br>
Create the destination directory:
{{{
su -c "mkdir /opt/arm-elf".
}}}
=== Install binutils ===
{{{
wget "ftp://ftp.gnu.org/gnu/binutils/binutils-2.21.tar.bz2"
tar xvjf binutils-2.21.tar.bz2
mkdir binutils-2.21-arm-elf
cd binutils-2.21-arm-elf/
../binutils-2.21/configure --srcdir=../binutils-2.21/ --target=arm-elf --prefix=/opt/arm-elf/
make
su -c "make install"
}}}
=== Install gcc ===
{{{
wget "ftp://ftp.gnu.org/gnu/gcc/gcc-4.5.2/gcc-4.5.2.tar.bz2"
tar -xvjf gcc-4.5.2.tar.bz2
}}}
Now edit the file "gcc-4.5.2/gcc/config/arm/t-arm-elf" and uncomment the following lines:
{{{
MULTILIB_OPTIONS    += mno-thumb-interwork/mthumb-interwork
MULTILIB_DIRNAMES   += normal interwork
}}}
We can continue the installation:
{{{
mkdir gcc-4.5.2-arm-elf
cd gcc-4.5.2-arm-elf/
../gcc-4.5.2/configure --srcdir=../gcc-4.5.2 --target=arm-elf --enable-languages=c \
--enable-clocale=gnu --disable-libm --disable-libc --disable-threads --disable-nls \
--disable-libssp --disable-intl --with-dpu=arm9 --with-newlib --prefix=/opt/arm-elf/
su -c "make install"
}}}
=== Compile 400plus ===
you need to download the [http://code.google.com/p/400plus/downloads/list 400plus sources] or checkout the current svn:
{{{
cd && svn checkout http://400plus.googlecode.com/svn/trunk/ 400plus-read-only
}}}
Finally, we are ready to compile:
{{{
export PATH=/opt/arm-elf/bin/:$PATH
cd 400plus
make
}}}
If everything goes as expected, you will get a new and shiny "AUTOEXEC.BIN" file;<br>
----
= links =
  * [http://code.google.com/p/400plus/wiki/FirmwareHackInstallation Hack Installation procedure]
  * [http://chdk.setepontos.com/index.php?topic=3290.0 CHDK forum thread for 400D/XTI development]<br>
  * [http://www.akae.cn/study/ebook/wrs/vx5.5/ VxWorks Programmer's Guide, Drivers API, OS Libraries and more]<br>
<br>

----
= chroot-gentoo32 =
{{{
#!/bin/bash

# change to appropriate dir
CHROOTDIR=/mnt/gentoo32

bind_dirs=(
	"/dev"
	"/dev/pts"
	"/dev/shm"
	"/proc"
	"/proc/bus/usb"
	"/sys"
	"/tmp"
	"/usr/portage" # this is only if your host is gentoo
)


# no need to change anything below this line

if [ $UID -ne 0 ]; then
	echo "need root... executing with su"
	su -c "$0 $*"
	exit
fi

mkdir -p $CHROOTDIR/usr/portage/
if [ ! -f $CHROOTDIR/root/.bashrc ]; then
	cp $CHROOTDIR/etc/skel/.bashrc $CHROOTDIR/root/.bashrc
	echo "source /etc/profile" >> $CHROOTDIR/root/.bashrc
	echo "env-update" >> $CHROOTDIR/root/.bashrc
	echo 'export PS1="[chroot] $PS1"' >> $CHROOTDIR/root/.bashrc
	echo 'export PATH=$PATH:/arm-elf-toolchain/bin/' >> $CHROOTDIR/root/.bashrc
fi

for (( x=0; x < ${#bind_dirs[@]}; x++ )); do
	dir="${bind_dirs[$x]}"
	mount -o bind "$dir" "$CHROOTDIR/$dir"
done

if [ `uname -m` == x86_64 ]; then
	l32=linux32
fi

$l32 chroot $CHROOTDIR /bin/bash

for (( x=$((${#bind_dirs[@]} - 1)) ; x >= 0; x-- )); do
	dir="${bind_dirs[$x]}"
	umount "$CHROOTDIR/$dir"
done

}}}