#summary [Developers] Information for developers


<wiki:toc max_depth="2" />
----
= Introduction =
useful information for developers wanting to compile the code.<br>
<br>
----
= toolchains =
== summon-arm-toolchain *(this is the latest)* ==
I'm using summon-arm-toolchain script initially written by Uwe Hermann, modified by Piotr Esden-Tempski<br>
and forked by Magic-Lantern guys. The toolchain needs to be compiled for soft-floats, <br>
the ML's script will compile it correctly. Please read the *32bit vs 64bit toolchain*, it's important.

here is some short code to help you:
{{{
cd /tmp
hg clone https://bitbucket.org/hudson/magic-lantern
hg update unified
cd magic-lantern/toolchain
./summon-arm
}}}
in the end you should have the arm toolchain in it's own folder.


== 32bit vs 64bit toolchain ==
So it turns out that when your host system is 64bit and you have the toolchain compiled there,<br>
it will produce some rellocation errors on linking phase, when linking 400plus.<br>
Adding -mlong-calls (or -fPIC) to the CFLAGS will fix the rellocation problems on 64bit host toolchain,<br>
but unfortunately will add about ~8kb (~11kb with -fPIC) to the AUTOEXEC.BIN. <br>
We prefer to spend this extra KB into another features, instead of loosing them to the linker.<br>
(_note_: please if someone find a way to compile the toolchain in 64bit linux and get rid of rellocation errors and -mlong-call, DO TELL US PLEASE !)

So Edu came with the solution: <br>
you need 32bit toolchain to get rid of the rellocation errors and the -mlong-calls (which adds 10kb)<br>
for that purpose you should use the chroot method below, or install a 32bit linux in a virtual machine.<br>
then make compile the toolchain there, and transfer it to your 64bit host<br>
(in my case i had to transfer a few extra libs with the toolchain and use LD_LIBRARY_PATH=/path/to/extra/libs)<br>

another solution would be to stay in the chroot/VM and compile 400Plus there.


== chroot in 32bit linux (gentoo) from 64bit linux host ==
this should be straight forward (copy/paste) howto.<br>
Read [http://www.gentoo.org/proj/en/base/amd64/howtos/index.xml?part=1&chap=2 this documentation] for more details.<br>
follow these steps to create and enter your cross environment.
{{{
cd /tmp
url="http://mirrors.kernel.org/gentoo/releases/x86/autobuilds"
wget $url/`curl $url/latest-stage3-i686.txt | tail -1`
mkdir /mnt/gentoo32
cd /mnt/gentoo32/
tar -xvjpf /tmp/stage3-i686-*.tar.bz2 
# ### UNCOMMENT THE NEXT LINE ONLY IF YOUR HOST IS _NOT_ GENTOO ### #
# wget http://distfiles.gentoo.org/snapshots/portage-latest.tar.bz2 && tar xjf portage-lat* -C usr/
cp -L /etc/resolv.conf /mnt/gentoo32/etc/
$EDITOR /mnt/gentoo32/etc/make.conf #can be skipped
wget http://0xAF.org/chroot-gentoo32 -O ~/chroot-gentoo32.sh
chmod +x ~/chroot-gentoo32.sh
~/chroot-gentoo32.sh
}}}

if you can't download chroot-gentoo32 script for some reason, see the end of this document for the source code.

You should be in working 32bit chroot now..<br>

Now compile the toolchain (see above)... and use it in the chroot, or copy it to your host system.

next you need to get the [http://code.google.com/p/400plus/downloads/list 400plus sources].<br>
if you want the current svn sources in your chroot, you'll need to install subversion first:<br>
{{{
emerge -av subversion
}}}
then checkout
{{{
cd && svn checkout http://400plus.googlecode.com/svn/trunk/ 400plus-read-only
}}}

== Fedora 16 in a Virtual Machine ==

This guide explains how to prepare a 32bit environment to cross-compile the source code; I had to follow this procedure as compilation was reporting inexplicable errors on my 64bit machine.

=== Create a VM ===

I used Fedora 16 (64 bits) as the "host" OS, and Fedora 16 (32 bits) as the "guest" OS, for no other particular reason that it is what I am used to run; I downloaded the [http://fedoraproject.org/en/get-fedora-options Fedora 16 Desktop Edition (32 bit CD ISO)].

Basically, I followed the [http://fedoraproject.org/wiki/Virtualization_Quick_Start Virtualization Quick Start guide] to create the virtual machine. Most relevant parameters for the emulation were: 4GB of disk space, 512 MB of RAM, 1 CPU. Select an i686 architecture (should work with a 64b arch, as long as you install a 32b OS) and use KVM if your processor supports it (it is way faster than the non-KVM alternative). Boot the VM, using the ISO downloaded previously, and install it to the (virtual) disk drive
(there are no critical parameters here, just follow the installation assistant).

=== Prepare the VM ===

No special preparation is required here, just update the software:
{{{
su -c "yum -y update"
su -c "yum -y update"
}}}

_Yes: it must be run twice, as the first update will only update the updater itself_. Then reboot (just the VM, not the computer) and install the required dependencies:
{{{
su -c "yum -y install gcc mpfr-devel libmpc-devel"
}}}

=== Install the cross-compiler ===

Once you have your 32bit machine up and running, simply follow the instructions at [#toolchains toolchains].

=== Compile 400plus ===

You need to download the [http://code.google.com/p/400plus/downloads/list 400plus sources] or checkout the current SVN:
{{{
cd && svn checkout http://400plus.googlecode.com/svn/trunk/ 400plus-read-only
}}}

Finally, we are ready to compile:
{{{
export PATH=/opt/arm-elf/bin/:$PATH
cd 400plus
make
}}}

If everything goes as expected, you will get a new and shiny "AUTOEXEC.BIN" file.

== Ubuntu ==

Our friend draekko has created a new build script for Ubuntu (tested only on Ubuntu 13.10 and 14.04) as well as required patches to recompile the toolchain on modern versions of Linux. Relevant files at https://github.com/draekko/arm-462-toolchain-400plus (relevent info in build-toolchain-for-400plus.sh). Same caveats for 64bit compiles as listed above.

----
= links =
  * [http://code.google.com/p/400plus/wiki/FirmwareHackInstallation Hack Installation procedure]
  * [http://chdk.setepontos.com/index.php?topic=3290.0 CHDK forum thread for 400D/XTI development]<br>
  * [http://www.akae.cn/study/ebook/wrs/vx5.5/ VxWorks Programmer's Guide, Drivers API, OS Libraries and more]<br>
<br>

----
= chroot-gentoo32 =
{{{
#!/bin/bash

# change to appropriate dir
CHROOTDIR=/mnt/gentoo32

bind_dirs=(
	"/dev"
	"/dev/pts"
	"/dev/shm"
	"/proc"
	"/proc/bus/usb"
	"/sys"
	"/tmp"
	"/usr/portage" # this is only if your host is gentoo
)


# no need to change anything below this line

if [ $UID -ne 0 ]; then
	echo "need root... executing with su"
	su -c "$0 $*"
	exit
fi

mkdir -p $CHROOTDIR/usr/portage/
if [ ! -f $CHROOTDIR/root/.bashrc ]; then
	cp $CHROOTDIR/etc/skel/.bashrc $CHROOTDIR/root/.bashrc
	echo "source /etc/profile" >> $CHROOTDIR/root/.bashrc
	echo "env-update" >> $CHROOTDIR/root/.bashrc
	echo 'export PS1="[chroot] $PS1"' >> $CHROOTDIR/root/.bashrc
	echo 'export PATH=$PATH:/arm-elf-toolchain/bin/' >> $CHROOTDIR/root/.bashrc
fi

for (( x=0; x < ${#bind_dirs[@]}; x++ )); do
	dir="${bind_dirs[$x]}"
	mount -o bind "$dir" "$CHROOTDIR/$dir"
done

if [ `uname -m` == x86_64 ]; then
	l32=linux32
fi

$l32 chroot $CHROOTDIR /bin/bash

for (( x=$((${#bind_dirs[@]} - 1)) ; x >= 0; x-- )); do
	dir="${bind_dirs[$x]}"
	umount "$CHROOTDIR/$dir"
done

}}}